}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO"),
# *output() functions
plotOutput(outputId = "hist")
))
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO")),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR")),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputID = "checkbox", label = "Save selection"),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputID = "checkbox", label = "Save selection", FALSE),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
numericInput(inputID = "funds", label = "Total funds available", value = 10000),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
HTML('<textarea id="foo" rows="3" cols="40">Default value</textarea>'),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
selectizeInput(inputId = "stocks", label = "Please enter your stocks", choices = stock.name, options = list(create = TRUE)),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
selectizeInput(inputId = "stocks", label = "Please enter your stocks", choices = country.name, options = list(create = TRUE)),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
selectizeInput(inputId = "stocks", label = "Please enter your stocks", choices = country.name, options = list(create = TRUE)),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
selectizeInput(inputId = "stocks", label = "Please enter your stocks", choices = state.name, options = list(create = TRUE)),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
textInput(inputId = "stock1", label = "Please enter your stocks", width = 100),
textInput(inputId = "stock2", width = 100),
textInput(inputId = "stock3", width = 100),
submitButton(text = "Apply Changes", icon = NULL, width = NULL),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
textInput(inputId = "stock1", label = "Please enter your stocks", width = 100),
textInput(inputId = "stock2", "",width = 100),
textInput(inputId = "stock3", "",width = 100),
submitButton(text = "Apply Changes", icon = NULL, width = NULL),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
#install shiny
#remove "#" to install shiny for first time
#options(repos = c(CRAN = "http://cran.rstudio.com"))
#install.packages('shiny')
#load shiny package
library(shiny)
#Define User Interface and create a responsive page
ui <- fluidPage(
# *Input() functions
sliderInput(inputId = "num", label = "Choose a number", value = 50, min = 1, max = 100),
radioButtons(inputId = "model", label = "Choose an optimization model", choices = c("MAD" = "MAD","MVO" = "MVO","Black Litterman" = "BL","CVAR" = "CVaR"), inline = TRUE),
checkboxInput(inputId = "savemodel", label = "Save selected model", FALSE),
numericInput(inputId = "funds", label = "Total funds available", value = 10000),
textInput(inputId = "stock1", label = "Please enter your stocks", width = 100),
textInput(inputId = "stock2", "",width = 100),
textInput(inputId = "stock3", "",width = 200),
submitButton(text = "Apply Changes", icon = NULL, width = NULL),
# *output() functions
plotOutput(outputId = "hist")
)
#define server
server <- function(input, output) {
#save frontier object to output
output$hist <- renderPlot({
#render a histogram of number of values in num
hist(rnorm(input$num))
})
}
#call shiny app
shinyApp(ui = ui, server = server)
shiny::runApp('Documents/Shafquat')
install.packages
install.packages('quantmod')
shiny::runApp('Documents/Shafquat')
install.packages('VGAM')
shiny::runApp('Documents/Shafquat')
install.packages('VGAM')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat')
shiny::runApp('Documents/Shafquat/esc499-capstone-design')
shiny::runApp()
shiny::runApp()
shiny::runApp()
